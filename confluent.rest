@name-connector = source-jdbc-postgres

# /
GET http://localhost:8083

### /connectors
GET http://localhost:8083/connectors

### /connector-plugins
GET http://localhost:8083/connector-plugins

### /connectors/{name-connector}/status
GET http://localhost:8083/connectors/{{name-connector}}/status

### /connectors/{name-connector}
GET http://localhost:8083/connectors/{{name-connector}}

### /connectors
POST http://localhost:8083/connectors
Content-Type: application/json

{
    "name": "{{name-connector}}",
    "config": {
        "name": "{{name-connector}}",
        "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
        "max.interval": "100",
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "connection.url": "jdbc:postgresql://postgres-kafka-db:5432/kafkadb",
        "connection.user": "kafka",
        "connection.password": "kafka@2025",
        "table.whitelist": "client",
        "mode": "incrementing",
        "incrementing.column.name": "id",
        "topic.prefix": "postgres-connect-",
        "value.converter.schemas.enable": "false"
    }
}

### /connectors | schema
PUT http://localhost:8083/connectors/{{name-connector}}/config
Content-Type: application/json

{
	"name": "{{name-connector}}",
	"connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
	"max.interval": "100",
	"key.converter": "org.apache.kafka.connect.storage.StringConverter",
	"value.converter": "org.apache.kafka.connect.json.JsonConverter",
	"connection.url": "jdbc:postgresql://postgres-kafka-db:5432/kafkadb",
	"connection.user": "kafka",
	"connection.password": "kafka@2025",
	"table.whitelist": "client",
	"mode": "incrementing",
	"incrementing.column.name": "id",
	"topic.prefix": "postgres-connect-"
}

### /connectors
POST http://localhost:8083/connectors
Content-Type: application/json

{
	"name": "{{name-connector}}",
	"config": {
		"name": "{{name-connector}}",
		"connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
		"tasks.max": "1",
		"max.interval": "100",
		"key.converter": "io.confluent.connect.json.JsonSchemaConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.json.JsonSchemaConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
		"connection.url": "jdbc:postgresql://postgres-kafka-db:5432/kafkadb",
		"connection.user": "kafka",
		"connection.password": "kafka@2025",
		"table.whitelist": "client",
		"mode": "incrementing",
		"incrementing.column.name": "id",
		"topic.prefix": "postgres-connect-",
		"topic.creation.default.replication.factor": "3",
		"topic.creation.default.partitions": "3",
		"topic.creation.$alias.replication.factor": "3",
		"topic.creation.$alias.partitions": "3",
		"transforms": "createKey,extractInt",
		"transforms.createKey.type": "org.apache.kafka.connect.transforms.ValueToKey",
		"transforms.createKey.fields": "id",
		"transforms.extractInt.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
		"transforms.extractInt.field": "id"
	}
}

### /connectors | schema
POST http://localhost:8083/connectors
Content-Type: application/json

{
	"name": "{{name-connector}}",
	"config": {
		"name": "{{name-connector}}",
		"connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
		"tasks.max": "1",
		"max.interval": "100",
		"key.converter": "io.confluent.connect.json.JsonSchemaConverter",
        "key.converter.schema.registry.url": "http://schema-registry:8081",
        "value.converter": "io.confluent.connect.json.JsonSchemaConverter",
        "value.converter.schema.registry.url": "http://schema-registry:8081",
		"connection.url": "jdbc:postgresql://postgres-kafka-db:5432/kafkadb",
		"connection.user": "kafka",
		"connection.password": "kafka@2025",
		"table.whitelist": "client",
		"mode": "incrementing",
		"incrementing.column.name": "id",
		"topic.prefix": "postgres-connect-",
		"topic.creation.default.replication.factor": "3",
		"topic.creation.default.partitions": "3",
		"topic.creation.$alias.replication.factor": "3",
		"topic.creation.$alias.partitions": "3",
		"transforms": "createKey,extractInt",
		"transforms.createKey.type": "org.apache.kafka.connect.transforms.ValueToKey",
		"transforms.createKey.fields": "id",
		"transforms.extractInt.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
		"transforms.extractInt.field": "id"
	}
}

### /connectors/{name-connector}/config | schema
PUT http://localhost:8083/connectors/{{name-connector}}/config
Content-Type: application/json

{
	"name": "{{name-connector}}",
	"connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
	"tasks.max": "4",
	"max.interval": "100",
	"key.converter": "io.confluent.connect.json.JsonSchemaConverter",
	"key.converter.schema.registry.url": "http://schema-registry:8081",
	"value.converter": "io.confluent.connect.json.JsonSchemaConverter",
	"value.converter.schema.registry.url": "http://schema-registry:8081",
	"connection.url": "jdbc:postgresql://postgres-kafka-db:5432/kafkadb",
	"connection.user": "kafka",
	"connection.password": "kafka@2025",
	"table.whitelist": "client",
	"mode": "incrementing",
	"incrementing.column.name": "id",
	"topic.prefix": "postgres-connect-",
	"topic.creation.default.replication.factor": "3",
	"topic.creation.default.partitions": "3",
	"topic.creation.$alias.replication.factor": "3",
	"topic.creation.$alias.partitions": "3",
	"transforms": "createKey,extractString",
	"transforms.createKey.type": "org.apache.kafka.connect.transforms.ValueToKey",
	"transforms.createKey.fields": "name",
	"transforms.extractString.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
	"transforms.extractString.field": "name"
}

### /connectors/{name-connector}/config | schema
PUT http://localhost:8083/connectors/{{name-connector}}/config
Content-Type: application/json

{
	"name": "{{name-connector}}",
	"connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",
	"tasks.max": "4",
	"max.interval": "100",
	"key.converter": "io.confluent.connect.json.JsonSchemaConverter",
	"key.converter.schema.registry.url": "http://schema-registry:8081",
	"value.converter": "io.confluent.connect.json.JsonSchemaConverter",
	"value.converter.schema.registry.url": "http://schema-registry:8081",
	"connection.url": "jdbc:postgresql://postgres-kafka-db:5432/kafkadb",
	"connection.user": "kafka",
	"connection.password": "kafka@2025",
	"table.whitelist": "client",
	"mode": "incrementing",
	"incrementing.column.name": "id",
	"topic.prefix": "postgres-connect-",
	"topic.creation.default.replication.factor": "3",
	"topic.creation.default.partitions": "3",
	"topic.creation.$alias.replication.factor": "3",
	"topic.creation.$alias.partitions": "3",
	"transforms": "createKey,extractString",
	"transforms.createKey.type": "org.apache.kafka.connect.transforms.ValueToKey",
	"transforms.createKey.fields": "hour_test",
	"transforms.extractString.type": "org.apache.kafka.connect.transforms.ExtractField$Key",
	"transforms.extractString.field": "hour_test"
}

### Kakfa schema registry REST API
### /config | schema
PUT http://localhost:8081/config
Content-Type: application/vnd.schemaregistry.v1+json

{
    "compatibility": "BACKWARD"
}

### /config/{name-schema} | schema specific
PUT http://localhost:8081/config/{{name-connector}}
Content-Type: application/vnd.schemaregistry.v1+json

{
    "compatibility": "NONE"
}

### Kafka Connect REST API
### /v3/clusters
GET http://localhost:8082/v3/clusters

### /v3/clusters/MkU3OEVBNTcwNTJENDM2Qk/topics
GET http://localhost:8082/v3/clusters/MkU3OEVBNTcwNTJENDM2Qk/topics

### /v3/clusters/{cluster-id}/topics/{topic-name}/records
POST http://localhost:8082/v3/clusters/MkU3OEVBNTcwNTJENDM2Qk/topics/my-topic-created/records
Content-Type: application/json

{
    "headers": [
        {
            "name": "Header-1",
            "value": "SGVhZGVyLTE="
        },
        {
            "name": "Header-2",
            "value": "SGVhZGVyLTI="
        }
    ],
    "key": {
        "type": "BINARY",
        "data": "Zm9vYmFy"
    },
    "value": {
        "type": "STRING",
        "data": "Robson"
    }
}